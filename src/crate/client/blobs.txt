==============
Crate BLOB API
==============

The Crate client library provides an API to access the powerful BLOB storage
capabilities of the Crate server.

First, a connection object is required. This can be retrieved by importing the
client module and then connecting to one or more crate server::

    >>> from crate import client
    >>> connection = client.connect(crate_host)

The connection object can then be used to retrieve a BLOB container. A BLOB
container is a special kind of table that can contain files. On these
containers it is possible to define the number of shards and replicas.

To access a container the connection object provides a `get_blob_container`
method::

    >>> blob_container = connection.get_blob_container('myfiles')
    >>> blob_container
    <BlobContainer 'myfiles'>

This container object can now be used to either get statistics about the
stored files, to download, upload or delete files::

    >>> blob_container.stats()

To upload a file the `.put()` method can be used. The method takes either a
file like object, a generator or the file content as string.

.. doctest::
    :hide:

    >>> from tempfile import mkstemp
    >>> from os import fdopen
    >>> tmp_file = mkstemp()
    >>> tmp_file_name = tmp_file[1]
    >>> tmp_file_obj = fdopen(tmp_file[0])
    >>> tmp_file_obj.write('aaaa')
    >>> tmp_file_obj.close()

Using file like objects or a generator is recommended since then it is possible
to stream the files without reading them into memory::

    >>> f = open(tmp_file_name)
    >>> blob_container.put(f)
    ASDF

The client will then compute then compute the `SHA-1` hash of the file which is
required by the Crate server to store the file. And then upload the file using
that hash. If the upload was succesful the hash is then returned. If it failed
`None` is returned instead.
