---
name: test

on:
  pull_request: ~
  push:
    branches:
      - master
  schedule:
    - cron: '0 2 * * *'


jobs:
  test:
    name: "Test python-${{ matrix.python-version }}
     sqla: ${{ matrix.sqla-version }}
     CrateDB: ${{ matrix.crate-version }}
     on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        crate-version: [nightly]
        os: [ubuntu-latest, macos-latest, windows-latest]
        sqla-version: ['1.1.18', '1.2.19', '1.3.20']
        python-version: [3.5, 3.6, 3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@master
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python bootstrap.py

          # replace SQLAlchemy version
          sed -ir 's/SQLAlchemy.*/SQLAlchemy = ${{ matrix.sqla-version }}/g' versions.cfg

          # Adjust CrateDB version, only on Linux.
          if [ ${{ matrix.os }} = "ubuntu-latest" ]; then
            if [ ${{ matrix.crate-version }} = "nightly" ]; then
              sed -ir 's/releases/releases\/nightly/g' base.cfg
              sed -ir 's/crate_server.*/crate_server = latest/g' versions.cfg
            else
              sed -ir 's/crate-/crate_/g' base.cfg
              sed -ir 's/crate_server.*/crate_server = ${{ matrix.crate-version }}/g' versions.cfg
            fi
          fi

          bin/buildout -n -c base.cfg

      - name: Test
        shell: bash
        run: |
          bin/flake8

          if [[ ${{ matrix.os }} = "ubuntu-latest" ]]; then
            bin/coverage run bin/test -vv1
          fi
          if [[ ${{ matrix.os }} = "macos-latest" ]]; then
            bin/coverage run bin/test-quick -vv1
          fi
          if [[ ${{ matrix.os }} = "windows-latest" && ${{ matrix.sqla-version }} = "1.3.20" ]]; then

            # Disable firewall.
            netsh advfirewall set allprofiles state off

            # Reset IP stack.
            netsh winsock reset

            # Disable IPv6.
            netsh interface teredo set state disabled
            netsh interface ipv6 6to4 set state state=disabled undoonstop=disabled
            netsh interface ipv6 isatap set state state=disabled

            # Run tests.
            bin/test-quick -vv1
          fi
